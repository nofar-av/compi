@.intFormat = internal constant [4 x i8] c"%d\0A\00"
@.DIVIDE_BY_ZERO.str = internal constant [23 x i8] c"Error division by zero\00"
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @print_string(i8*) {
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0), i8* %0)
ret void
}
define void @printi_int(i32) {
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0), i32 %0)
ret void
}
define void @check_div_error(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @print_string(i8* getelementptr([23 x i8], [23 x i8]* @.DIVIDE_BY_ZERO.str, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}
define i32 @Func_int(i32) {
%var_0 = alloca i32, i32 50
%var_1 = add i32 0, 1
%var_2 = add i32 %0, %var_1
ret i32 %var_2
ret i32 0
}
define void @maxTestsCallFuncInWhile() {
%var_3 = alloca i32, i32 50
%var_5 = getelementptr i32, i32* %var_3, i32 0
store i32 0, i32* %var_5
br label %label_11
label_11:
%var_6 = getelementptr i32, i32* %var_3, i32 0
%var_7 = load i32,  i32* %var_6
%var_9 = add i32 0, 10
%var_10 = icmp slt i32 %var_7, %var_9
br i1 %var_10, label %label_18, label %label_31
br label %label_18
label_18:
%var_11 = getelementptr i32, i32* %var_3, i32 0
%var_12 = load i32,  i32* %var_11
call void @printi_int(i32 %var_12)
br label %label_23
label_23:
%var_14 = getelementptr i32, i32* %var_3, i32 0
%var_15 = load i32,  i32* %var_14
%var_17 = call i32 @Func_int(i32 %var_15)
%var_19 = getelementptr i32, i32* %var_3, i32 0
store i32 %var_17, i32* %var_19
br label %label_11
label_31:
ret void
}
define void @main() {
%var_20 = alloca i32, i32 50
call void @maxTestsCallFuncInWhile()
br label %label_37
label_37:
ret void
}
