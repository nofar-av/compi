@.intFormat = internal constant [4 x i8] c"%d\0A\00"
@.DIVIDE_BY_ZERO.str = internal constant [23 x i8] c"Error division by zero\00"
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @print_string(i8*) {
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0), i8* %0)
ret void
}
define void @printi_int(i32) {
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0), i32 %0)
ret void
}
define void @check_div_error(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @print_string(i8* getelementptr([23 x i8], [23 x i8]* @.DIVIDE_BY_ZERO.str, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}
@var_6 = constant [43 x i8] c"Happiness exists for those who wish for it\00"
define void @maxTestsTestBooleansBasic() {
%var_0 = alloca i32, i32 50
%var_2 = getelementptr i32, i32* %var_0, i32 0
store i32 0, i32* %var_2
br label %TRUE_LIST_label_5
br label %TRUE_LIST_label_5
TRUE_LIST_label_5:
br label %NEXT_LIST_label_5
FALSE_LIST_label_5:
br label %NEXT_LIST_label_5
NEXT_LIST_label_5:
%var_3 = phi i1 [ 1, %TRUE_LIST_label_5], [0, %FALSE_LIST_label_5]
%var_4 = zext i1 %var_3 to i32
%var_5 = getelementptr i32, i32* %var_0, i32 0
store i32 %var_4, i32* %var_5
br label %label_16
br label %label_16
label_16:
%var_6.ptr = getelementptr[43 x i8], [43 x i8]* @var_6, i32 0, i32 0
call void @print_string(i8* %var_6.ptr)
br label %label_20
label_20:
br label %label_22
label_22:
ret void
}
define void @main() {
%var_7 = alloca i32, i32 50
call void @maxTestsTestBooleansBasic()
br label %label_29
label_29:
ret void
}
