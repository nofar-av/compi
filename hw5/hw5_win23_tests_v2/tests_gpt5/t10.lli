@.intFormat = internal constant [4 x i8] c"%d\0A\00"
@.DIVIDE_BY_ZERO.str = internal constant [23 x i8] c"Error division by zero\00"
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @print_string(i8*) {
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0), i8* %0)
ret void
}
define void @printi_int(i32) {
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0), i32 %0)
ret void
}
define void @check_div_error(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @print_string(i8* getelementptr([23 x i8], [23 x i8]* @.DIVIDE_BY_ZERO.str, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}
define i1 @isDivisible_int_int(i32, i32) {
%var_0 = alloca i32, i32 50
%var_2 = getelementptr i32, i32* %var_0, i32 0
store i32 %0, i32* %var_2
%var_3 = add i32 0, 0
%var_5 = getelementptr i32, i32* %var_0, i32 1
store i32 %var_3, i32* %var_5
br label %label_7
label_7:
%var_6 = getelementptr i32, i32* %var_0, i32 0
%var_7 = load i32,  i32* %var_6
%var_9 = icmp sge i32 %var_7, %1
br i1 %var_9, label %label_13, label %label_27
br label %label_13
label_13:
%var_10 = getelementptr i32, i32* %var_0, i32 0
%var_11 = load i32,  i32* %var_10
%var_13 = sub i32 %var_11, %1
%var_15 = getelementptr i32, i32* %var_0, i32 0
store i32 %var_13, i32* %var_15
%var_16 = getelementptr i32, i32* %var_0, i32 1
%var_17 = load i32,  i32* %var_16
%var_19 = add i32 0, 1
%var_20 = add i32 %var_17, %var_19
%var_22 = getelementptr i32, i32* %var_0, i32 1
store i32 %var_20, i32* %var_22
br label %label_7
label_27:
%var_23 = getelementptr i32, i32* %var_0, i32 0
%var_24 = load i32,  i32* %var_23
%var_26 = add i32 0, 0
%var_27 = icmp eq i32 %var_24, %var_26
br i1 %var_27, label %TRUE_LIST_label_33, label %FALSE_LIST_label_33
br label %TRUE_LIST_label_33
TRUE_LIST_label_33:
br label %NEXT_LIST_label_33
FALSE_LIST_label_33:
br label %NEXT_LIST_label_33
NEXT_LIST_label_33:
%var_28 = phi i1 [ 1, %TRUE_LIST_label_33], [0, %FALSE_LIST_label_33]
ret i1 %var_28
ret i1 0
}
define i1 @isPrime_int(i32) {
%var_29 = alloca i32, i32 50
br label %TRUE_LIST_label_46
br label %TRUE_LIST_label_46
TRUE_LIST_label_46:
br label %NEXT_LIST_label_46
FALSE_LIST_label_46:
br label %NEXT_LIST_label_46
NEXT_LIST_label_46:
%var_30 = phi i1 [ 1, %TRUE_LIST_label_46], [0, %FALSE_LIST_label_46]
%var_31 = zext i1 %var_30 to i32
%var_32 = getelementptr i32, i32* %var_29, i32 0
store i32 %var_31, i32* %var_32
%var_33 = add i32 0, 2
%var_35 = getelementptr i32, i32* %var_29, i32 1
store i32 %var_33, i32* %var_35
br label %label_59
label_59:
%var_36 = getelementptr i32, i32* %var_29, i32 1
%var_37 = load i32,  i32* %var_36
%var_39 = icmp slt i32 %var_37, %0
br i1 %var_39, label %label_65, label %label_95
br label %label_65
label_65:
%var_40 = getelementptr i32, i32* %var_29, i32 1
%var_41 = load i32,  i32* %var_40
%var_43 = call i1 @isDivisible_int_int(i32 %0, i32 %var_41)
%var_44 = icmp ne i1 0, %var_43
br i1 %var_44 , label %label_72, label %label_86
br label %label_72
label_72:
br label %FALSE_LIST_label_75
br label %TRUE_LIST_label_75
TRUE_LIST_label_75:
br label %NEXT_LIST_label_75
FALSE_LIST_label_75:
br label %NEXT_LIST_label_75
NEXT_LIST_label_75:
%var_45 = phi i1 [ 1, %TRUE_LIST_label_75], [0, %FALSE_LIST_label_75]
%var_46 = zext i1 %var_45 to i32
%var_47 = getelementptr i32, i32* %var_29, i32 0
store i32 %var_46, i32* %var_47
br label %label_95
br label %label_86
label_86:
%var_48 = getelementptr i32, i32* %var_29, i32 1
%var_49 = load i32,  i32* %var_48
%var_51 = add i32 0, 1
%var_52 = add i32 %var_49, %var_51
%var_54 = getelementptr i32, i32* %var_29, i32 1
store i32 %var_52, i32* %var_54
br label %label_59
label_95:
%var_55 = getelementptr i32, i32* %var_29, i32 0
%var_56 = load i32,  i32* %var_55
%var_57 = trunc i32 %var_56 to i1
%var_58 = icmp ne i1 0, %var_57
br i1 %var_58, label %TRUE_LIST_label_101, label %FALSE_LIST_label_101
br label %TRUE_LIST_label_101
TRUE_LIST_label_101:
br label %NEXT_LIST_label_101
FALSE_LIST_label_101:
br label %NEXT_LIST_label_101
NEXT_LIST_label_101:
%var_59 = phi i1 [ 1, %TRUE_LIST_label_101], [0, %FALSE_LIST_label_101]
ret i1 %var_59
ret i1 0
}
define void @main() {
%var_60 = alloca i32, i32 50
%var_61 = add i32 0, 200
%var_63 = getelementptr i32, i32* %var_60, i32 0
store i32 %var_61, i32* %var_63
%var_64 = getelementptr i32, i32* %var_60, i32 0
%var_65 = load i32,  i32* %var_64
%var_67 = trunc i32 %var_65 to i8
%var_68 = zext i8 %var_67 to i32
%var_69 = getelementptr i32, i32* %var_60, i32 1
store i32 %var_68, i32* %var_69
%var_70 = add i32 0, 0
%var_71 = trunc i32 %var_70 to i8
%var_72 = zext i8 %var_71 to i32
%var_73 = getelementptr i32, i32* %var_60, i32 2
store i32 %var_72, i32* %var_73
%var_74 = add i32 0, 2
%var_76 = getelementptr i32, i32* %var_60, i32 3
store i32 %var_74, i32* %var_76
br label %label_130
label_130:
%var_77 = getelementptr i32, i32* %var_60, i32 3
%var_78 = load i32,  i32* %var_77
%var_80 = getelementptr i32, i32* %var_60, i32 0
%var_81 = load i32,  i32* %var_80
%var_83 = icmp slt i32 %var_78, %var_81
br i1 %var_83, label %label_138, label %label_178
br label %label_138
label_138:
%var_84 = getelementptr i32, i32* %var_60, i32 0
%var_85 = load i32,  i32* %var_84
%var_87 = getelementptr i32, i32* %var_60, i32 3
%var_88 = load i32,  i32* %var_87
%var_90 = call i1 @isDivisible_int_int(i32 %var_85, i32 %var_88)
%var_91 = icmp ne i1 0, %var_90
br i1 %var_91 , label %label_147, label %label_169
br label %label_147
label_147:
%var_92 = getelementptr i32, i32* %var_60, i32 3
%var_93 = load i32,  i32* %var_92
%var_95 = call i1 @isPrime_int(i32 %var_93)
%var_96 = icmp ne i1 0, %var_95
br i1 %var_96 , label %label_154, label %label_167
br label %label_154
label_154:
%var_97 = getelementptr i32, i32* %var_60, i32 3
%var_98 = load i32,  i32* %var_97
%var_100 = trunc i32 %var_98 to i8
%var_101 = zext i8 %var_100 to i32
%var_102 = getelementptr i32, i32* %var_60, i32 2
store i32 %var_101, i32* %var_102
%var_103 = getelementptr i32, i32* %var_60, i32 3
%var_104 = load i32,  i32* %var_103
call void @printi_int(i32 %var_104)
br label %label_165
label_165:
br label %label_167
label_167:
br label %label_169
label_169:
%var_106 = getelementptr i32, i32* %var_60, i32 3
%var_107 = load i32,  i32* %var_106
%var_109 = add i32 0, 1
%var_110 = add i32 %var_107, %var_109
%var_112 = getelementptr i32, i32* %var_60, i32 3
store i32 %var_110, i32* %var_112
br label %label_130
label_178:
ret void
ret void
}
