@.intFormat = internal constant [4 x i8] c"%d\0A\00"
@.DIVIDE_BY_ZERO.str = internal constant [23 x i8] c"Error division by zero\00"
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @print_string(i8*) {
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0), i8* %0)
ret void
}
define void @printi_int(i32) {
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0), i32 %0)
ret void
}
define i32 @Func_int(i32) {
%var_0 = alloca i32, i32 50
%var_1 = add i32 0, 5
%var_2 = add i32 %0, %var_1
ret i32 %var_2
ret i32 0
}
define void @maxTestsCheckSumBetweenFuncs() {
%var_3 = alloca i32, i32 50
%var_4 = add i32 0, 3
%var_5 = call i32 @Func_int(i32 %var_4)
%var_6 = add i32 0, 5
%var_7 = call i32 @Func_int(i32 %var_6)
%var_8 = add i32 %var_5, %var_7
%var_10 = getelementptr i32, i32* %var_3, i32 0
store i32 %var_8, i32* %var_10
%var_11 = add i32 0, 3
%var_12 = call i32 @Func_int(i32 %var_11)
call void @printi_int(i32 %var_12)
br label %label_19
label_19:
%var_13 = add i32 0, 5
%var_14 = call i32 @Func_int(i32 %var_13)
call void @printi_int(i32 %var_14)
br label %label_24
label_24:
%var_15 = getelementptr i32, i32* %var_3, i32 0
%var_16 = load i32,  i32* %var_15
call void @printi_int(i32 %var_16)
br label %label_29
label_29:
ret void
}
define void @main() {
%var_18 = alloca i32, i32 50
call void @maxTestsCheckSumBetweenFuncs()
br label %label_36
label_36:
ret void
}
