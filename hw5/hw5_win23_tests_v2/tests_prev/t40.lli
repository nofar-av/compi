@.intFormat = internal constant [4 x i8] c"%d\0A\00"
@.DIVIDE_BY_ZERO.str = internal constant [23 x i8] c"Error division by zero\00"
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @print_string(i8*) {
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0), i8* %0)
ret void
}
define void @printi_int(i32) {
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0), i32 %0)
ret void
}
define void @check_div_error(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @print_string(i8* getelementptr([23 x i8], [23 x i8]* @.DIVIDE_BY_ZERO.str, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}
define void @main() {
%var_0 = alloca i32, i32 50
%var_1 = add i32 0, 10
%var_3 = getelementptr i32, i32* %var_0, i32 0
store i32 %var_1, i32* %var_3
%var_4 = add i8 0, 10
%var_5 = zext i8 %var_4 to i32
%var_6 = getelementptr i32, i32* %var_0, i32 1
store i32 %var_5, i32* %var_6
%var_7 = getelementptr i32, i32* %var_0, i32 0
%var_8 = load i32,  i32* %var_7
%var_10 = getelementptr i32, i32* %var_0, i32 1
%var_11 = load i32,  i32* %var_10
%var_13 = add i32 %var_8, %var_11
%var_15 = getelementptr i32, i32* %var_0, i32 2
store i32 %var_13, i32* %var_15
%var_16 = getelementptr i32, i32* %var_0, i32 2
%var_17 = load i32,  i32* %var_16
%var_19 = add i32 0, 15
call void @check_div_error(i32 %var_19)
%var_20 = sdiv i32 %var_17, %var_19
call void @printi_int(i32 %var_20)
br label %label_22
label_22:
ret void
}
