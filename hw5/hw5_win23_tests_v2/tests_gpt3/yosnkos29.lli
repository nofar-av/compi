@.intFormat = internal constant [4 x i8] c"%d\0A\00"
@.DIVIDE_BY_ZERO.str = internal constant [23 x i8] c"Error division by zero\00"
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @print_string(i8*) {
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0), i8* %0)
ret void
}
define void @printi_int(i32) {
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0), i32 %0)
ret void
}
define void @check_div_error(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @print_string(i8* getelementptr([23 x i8], [23 x i8]* @.DIVIDE_BY_ZERO.str, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}
@var_7 = constant [15 x i8] c"ola mi amigos!\00"
@var_8 = constant [5 x i8] c"paap\00"
define void @foo_int_int_int(i32, i32, i32) {
%var_0 = alloca i32, i32 50
%var_1 = add i32 0, 3
%var_2 = icmp eq i32 %0, %var_1
br i1 %var_2, label %label_5, label %label_22
br label %label_5
label_5:
%var_3 = add i32 0, 2
%var_4 = icmp eq i32 %1, %var_3
br i1 %var_4, label %label_10, label %label_22
br label %label_10
label_10:
%var_5 = add i32 0, 1
%var_6 = icmp eq i32 %2, %var_5
br i1 %var_6, label %label_15, label %label_22
br label %label_15
label_15:
%var_7.ptr = getelementptr[15 x i8], [15 x i8]* @var_7, i32 0, i32 0
call void @print_string(i8* %var_7.ptr)
br label %label_19
label_19:
br label %label_28
br label %label_22
label_22:
%var_8.ptr = getelementptr[5 x i8], [5 x i8]* @var_8, i32 0, i32 0
call void @print_string(i8* %var_8.ptr)
br label %label_26
label_26:
br label %label_28
label_28:
ret void
}
define void @main() {
%var_9 = alloca i32, i32 50
%var_10 = add i32 0, 3
%var_11 = add i32 0, 2
%var_12 = add i32 0, 1
call void @foo_int_int_int(i32 %var_10, i32 %var_11, i32 %var_12)
br label %label_38
label_38:
ret void
}
