@.intFormat = internal constant [4 x i8] c"%d\0A\00"
@.DIVIDE_BY_ZERO.str = internal constant [23 x i8] c"Error division by zero\00"
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @print_string(i8*) {
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0), i8* %0)
ret void
}
define void @printi_int(i32) {
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0), i32 %0)
ret void
}
define void @check_div_error(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @print_string(i8* getelementptr([23 x i8], [23 x i8]* @.DIVIDE_BY_ZERO.str, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}
@var_1 = constant [127 x i8] c"If you believe it will work out, you’ll see opportunities. If you believe it won’t, you will see obstacles. – Wayne Dyer\00"
define void @Func_bool(i1) {
%var_0 = alloca i32, i32 50
%var_1.ptr = getelementptr[127 x i8], [127 x i8]* @var_1, i32 0, i32 0
call void @print_string(i8* %var_1.ptr)
br label %label_4
label_4:
ret void
}
define void @maxTestsTestPassRelopToFunc() {
%var_2 = alloca i32, i32 50
%var_3 = add i32 0, 1
%var_4 = add i32 0, 2
%var_5 = icmp slt i32 %var_3, %var_4
br i1 %var_5, label %TRUE_LIST_label_14, label %FALSE_LIST_label_14
br label %TRUE_LIST_label_14
TRUE_LIST_label_14:
br label %NEXT_LIST_label_14
FALSE_LIST_label_14:
br label %NEXT_LIST_label_14
NEXT_LIST_label_14:
%var_6 = phi i1 [ 1, %TRUE_LIST_label_14], [0, %FALSE_LIST_label_14]
call void @Func_bool(i1 %var_6)
br label %label_22
label_22:
ret void
}
define void @main() {
%var_7 = alloca i32, i32 50
call void @maxTestsTestPassRelopToFunc()
br label %label_29
label_29:
ret void
}
