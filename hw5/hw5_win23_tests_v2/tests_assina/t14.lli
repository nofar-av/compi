@.intFormat = internal constant [4 x i8] c"%d\0A\00"
@.DIVIDE_BY_ZERO.str = internal constant [23 x i8] c"Error division by zero\00"
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @print_string(i8*) {
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0), i8* %0)
ret void
}
define void @printi_int(i32) {
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0), i32 %0)
ret void
}
define void @check_div_error(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @print_string(i8* getelementptr([23 x i8], [23 x i8]* @.DIVIDE_BY_ZERO.str, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}
@var_1 = constant [15 x i8] c"Expecting true\00"
@var_23 = constant [12 x i8] c"res == true\00"
@var_24 = constant [4 x i8] c"Fin\00"
define void @main() {
%var_0 = alloca i32, i32 50
%var_1.ptr = getelementptr[15 x i8], [15 x i8]* @var_1, i32 0, i32 0
call void @print_string(i8* %var_1.ptr)
br label %label_4
label_4:
br label %TRUE_LIST_label_7
br label %TRUE_LIST_label_7
TRUE_LIST_label_7:
br label %NEXT_LIST_label_7
FALSE_LIST_label_7:
br label %NEXT_LIST_label_7
NEXT_LIST_label_7:
%var_2 = phi i1 [ 1, %TRUE_LIST_label_7], [0, %FALSE_LIST_label_7]
%var_3 = zext i1 %var_2 to i32
%var_4 = getelementptr i32, i32* %var_0, i32 0
store i32 %var_3, i32* %var_4
br label %FALSE_LIST_label_18
br label %TRUE_LIST_label_18
TRUE_LIST_label_18:
br label %NEXT_LIST_label_18
FALSE_LIST_label_18:
br label %NEXT_LIST_label_18
NEXT_LIST_label_18:
%var_5 = phi i1 [ 1, %TRUE_LIST_label_18], [0, %FALSE_LIST_label_18]
%var_6 = zext i1 %var_5 to i32
%var_7 = getelementptr i32, i32* %var_0, i32 1
store i32 %var_6, i32* %var_7
%var_8 = getelementptr i32, i32* %var_0, i32 0
%var_9 = load i32,  i32* %var_8
%var_10 = trunc i32 %var_9 to i1
%var_11 = icmp ne i1 0, %var_10
br i1 %var_11, label %TRUE_LIST_label_40, label %label_33
br label %label_33
label_33:
%var_12 = getelementptr i32, i32* %var_0, i32 1
%var_13 = load i32,  i32* %var_12
%var_14 = trunc i32 %var_13 to i1
%var_15 = icmp ne i1 0, %var_14
br i1 %var_15, label %TRUE_LIST_label_40, label %FALSE_LIST_label_40
br label %TRUE_LIST_label_40
TRUE_LIST_label_40:
br label %NEXT_LIST_label_40
FALSE_LIST_label_40:
br label %NEXT_LIST_label_40
NEXT_LIST_label_40:
%var_16 = phi i1 [ 1, %TRUE_LIST_label_40], [0, %FALSE_LIST_label_40]
%var_17 = zext i1 %var_16 to i32
%var_18 = getelementptr i32, i32* %var_0, i32 2
store i32 %var_17, i32* %var_18
%var_19 = getelementptr i32, i32* %var_0, i32 2
%var_20 = load i32,  i32* %var_19
%var_21 = trunc i32 %var_20 to i1
%var_22 = icmp ne i1 0, %var_21
br i1 %var_22, label %label_55, label %label_61
br label %label_55
label_55:
%var_23.ptr = getelementptr[12 x i8], [12 x i8]* @var_23, i32 0, i32 0
call void @print_string(i8* %var_23.ptr)
br label %label_59
label_59:
br label %label_61
label_61:
%var_24.ptr = getelementptr[4 x i8], [4 x i8]* @var_24, i32 0, i32 0
call void @print_string(i8* %var_24.ptr)
br label %label_65
label_65:
ret void
}
