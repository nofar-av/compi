@.intFormat = internal constant [4 x i8] c"%d\0A\00"
@.DIVIDE_BY_ZERO.str = internal constant [23 x i8] c"Error division by zero\00"
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @print_string(i8*) {
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0), i8* %0)
ret void
}
define void @printi_int(i32) {
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0), i32 %0)
ret void
}
define void @check_div_error(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @print_string(i8* getelementptr([23 x i8], [23 x i8]* @.DIVIDE_BY_ZERO.str, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}
@var_1 = constant [28 x i8] c"100 / (256b) is div by zero\00"
@var_17 = constant [35 x i8] c"You failed this basic test! (lmao)\00"
define void @main() {
%var_0 = alloca i32, i32 50
%var_1.ptr = getelementptr[28 x i8], [28 x i8]* @var_1, i32 0, i32 0
call void @print_string(i8* %var_1.ptr)
br label %label_4
label_4:
%var_2 = add i8 0, 100
%var_3 = zext i8 %var_2 to i32
%var_4 = getelementptr i32, i32* %var_0, i32 0
store i32 %var_3, i32* %var_4
%var_5 = getelementptr i32, i32* %var_0, i32 0
%var_6 = load i32,  i32* %var_5
%var_7 = trunc i32 %var_6 to i8
%var_8 = getelementptr i32, i32* %var_0, i32 0
%var_9 = load i32,  i32* %var_8
%var_10 = trunc i32 %var_9 to i8
%var_11 = add i8 0, 156
%var_12 = add i8 %var_10, %var_11
%var_14 = zext i8 %var_12 to i32
call void @check_div_error(i32 %var_14)
%var_13 = udiv i8 %var_7, %var_12
%var_15 = zext i8 %var_13 to i32
%var_16 = getelementptr i32, i32* %var_0, i32 0
store i32 %var_15, i32* %var_16
%var_17.ptr = getelementptr[35 x i8], [35 x i8]* @var_17, i32 0, i32 0
call void @print_string(i8* %var_17.ptr)
br label %label_26
label_26:
ret void
}
