@.intFormat = internal constant [4 x i8] c"%d\0A\00"
@.DIVIDE_BY_ZERO.str = internal constant [23 x i8] c"Error division by zero\00"
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @print_string(i8*) {
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0), i8* %0)
ret void
}
define void @printi_int(i32) {
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0), i32 %0)
ret void
}
define void @check_div_error(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @print_string(i8* getelementptr([23 x i8], [23 x i8]* @.DIVIDE_BY_ZERO.str, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}
@var_1 = constant [17 x i8] c"MORE while tests\00"
@var_2 = constant [63 x i8] c"will be calculating x + 1 in each iteration starting from x= 0\00"
@var_11 = constant [7 x i8] c"x is: \00"
@var_40 = constant [13 x i8] c"You are good\00"
define void @main() {
%var_0 = alloca i32, i32 50
%var_1.ptr = getelementptr[17 x i8], [17 x i8]* @var_1, i32 0, i32 0
call void @print_string(i8* %var_1.ptr)
br label %label_4
label_4:
%var_2.ptr = getelementptr[63 x i8], [63 x i8]* @var_2, i32 0, i32 0
call void @print_string(i8* %var_2.ptr)
br label %label_8
label_8:
%var_3 = add i32 0, 0
%var_5 = getelementptr i32, i32* %var_0, i32 0
store i32 %var_3, i32* %var_5
br label %label_13
label_13:
%var_6 = getelementptr i32, i32* %var_0, i32 0
%var_7 = load i32,  i32* %var_6
%var_9 = add i32 0, 23
%var_10 = icmp slt i32 %var_7, %var_9
br i1 %var_10, label %label_23, label %label_20
br label %label_20
label_20:
br label %label_57
br label %label_23
label_23:
%var_11.ptr = getelementptr[7 x i8], [7 x i8]* @var_11, i32 0, i32 0
call void @print_string(i8* %var_11.ptr)
br label %label_27
label_27:
%var_12 = getelementptr i32, i32* %var_0, i32 0
%var_13 = load i32,  i32* %var_12
call void @printi_int(i32 %var_13)
br label %label_32
label_32:
%var_15 = getelementptr i32, i32* %var_0, i32 0
%var_16 = load i32,  i32* %var_15
%var_18 = add i32 0, 1
%var_19 = add i32 %var_16, %var_18
%var_21 = getelementptr i32, i32* %var_0, i32 0
store i32 %var_19, i32* %var_21
br label %label_13
%var_22 = getelementptr i32, i32* %var_0, i32 0
%var_23 = load i32,  i32* %var_22
%var_25 = getelementptr i32, i32* %var_0, i32 0
%var_26 = load i32,  i32* %var_25
%var_28 = sub i32 %var_23, %var_26
%var_30 = getelementptr i32, i32* %var_0, i32 1
store i32 %var_28, i32* %var_30
%var_31 = getelementptr i32, i32* %var_0, i32 1
%var_32 = load i32,  i32* %var_31
%var_34 = getelementptr i32, i32* %var_0, i32 1
%var_35 = load i32,  i32* %var_34
call void @check_div_error(i32 %var_35)
%var_37 = sdiv i32 %var_32, %var_35
%var_39 = getelementptr i32, i32* %var_0, i32 1
store i32 %var_37, i32* %var_39
br label %label_13
label_57:
%var_40.ptr = getelementptr[13 x i8], [13 x i8]* @var_40, i32 0, i32 0
call void @print_string(i8* %var_40.ptr)
br label %label_60
label_60:
ret void
}
