%{
	#include <iostream>
	#include <stdlib.h>
        #include "symtable.hpp"
        #include "hw3_output.hpp"
	
        using namespace std;
        
        int yylex();
        void checkBoolExp(string type);
        extern int yylineno;
        extern SymTable symtable;
	void yyerror(const char * message);
        
%}

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token OVERRIDE
%token TRUE
%token FALSE
%token RETURN
%token IF
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token ID
%token NUM
%token STRING
%right ASSIGN
%left OR
%left AND
%left RELOP
%left BINOP_ADD
%left BINOP_MUL
%nonassoc NOT
%left LPAREN LBRACE RPAREN RBRACE
%right ELSE

%%
Program : Funcs { $$ = new Program(); };

Funcs : /* epsilon */ { }
        | FuncDecl Funcs { };

FuncDecl : OverRide RetType ID LPAREN Formals RPAREN {  $$ = new FuncDecl(dynamic_cast<OverRide*>($1)->is_override, 
                                                                dynamic_cast<RetType*>($2)->type, $3->value, dynamic_cast<Formals*>($5)); } LBRACE Statements RBRACE { symtable.removeScope(); };

OverRide : /* epsilon */ { $$ = new OverRide(); }
        |  OVERRIDE { $$ = new OverRide(true); };

RetType : Type                          {$$ = new RetType(dynamic_cast<Type*>($1)->type);}
        | VOID                          {$$ = new RetType("void");};

Formals : /* epsilon */ { $$ = new Formals(); }
        | FormalsList { $$ = new Formals(dynamic_cast<FormalsList*>($1)); };

FormalsList : FormalDecl { $$ = new FormalsList(dynamic_cast<FormalDecl*>($1)); }
            | FormalDecl COMMA FormalsList { $$ = new FormalsList(dynamic_cast<FormalDecl*>($1), 
                                                        dynamic_cast<FormalsList*>($3)); };

FormalDecl : Type ID { $$ = new FormalDecl(dynamic_cast<Type*>($1), $2->value); };

Statements : Statement { $$ = new Statements(); }
            | Statements Statement { $$ = new Statements(); };

Statement : LBRACE AddScopeMarker Statements RBRACE { symtable.removeScope(); }
        | Type ID SC { $$ = new Statement($2->value, (dynamic_cast<Type*>($1))->type); }
        | Type ID ASSIGN Exp SC { $$ = new Statement($2->value, (dynamic_cast<Type*>($1))->type, dynamic_cast<Exp*>($4)); }
        | ID ASSIGN Exp SC { $$ = new Statement($1->value, dynamic_cast<Exp*>($3)); }
        | Call SC { }
        | RETURN SC { $$ = new Statement(); }
        | RETURN Exp SC { $$ = new Statement(dynamic_cast<Exp*>($2)); }
        | IF LPAREN CheckBool RPAREN AddScopeMarker Statement { symtable.removeScope(); }
        | IF LPAREN CheckBool RPAREN AddScopeMarker Statement ELSE RemoveScopeMarker AddScopeMarker Statement { symtable.removeScope(); }
        | WHILE LPAREN CheckBool RPAREN AddLoopScopeMarker Statement { symtable.removeScope(); }
        | BREAK SC { symtable.verifyInLoop(true); }
        | CONTINUE SC { symtable.verifyInLoop(false); }
        ;

Call : ID LPAREN ExpList RPAREN         {$$ = new Call($1->value, dynamic_cast<ExpList*>($3));}
    | ID LPAREN RPAREN                  {$$ = new Call($1->value);};

ExpList : Exp                   {$$ = new ExpList(dynamic_cast<Exp*>($1));}
        | Exp COMMA ExpList     {$$ = new ExpList(dynamic_cast<Exp*>($1), dynamic_cast<ExpList*>($3));};

Type : INT { $$ = new Type("int"); }
    | BYTE { $$ = new Type("byte"); }
    | BOOL { $$ = new Type("bool"); };

Exp : LPAREN Exp RPAREN                                            {$$ = new Exp(dynamic_cast<Exp*>($2));}
    | Exp BINOP_MUL Exp                                            {$$ = new Exp($1, $3, "int", $2->value);}
    | Exp BINOP_ADD Exp                                            {$$ = new Exp($1, $3, "int", $2->value);}
    | ID                                                           {$$ = new Exp($1->value);}
    | Call                                                         {$$ = new Exp(dynamic_cast<Call*>($1));}
    | NUM                                                          {$$ = new Exp($1, "int");}
    | NUM B                                                        {$$ = new Exp($1, "byte");}
    | STRING                                                       {$$ = new Exp($1, "string");}
    | TRUE                                                         {$$ = new Exp($1, "bool");}
    | FALSE                                                        {$$ = new Exp($1, "bool");}
    | NOT Exp                                                      {$$ = new Exp($2, "bool", $1->value);}
    | Exp AND Label Exp                                            {$$ = new Exp($1, $4, "bool", $2->value, $3->value);}
    | Exp OR Label Exp                                             {$$ = new Exp($1, $4, "bool", $2->value, $3->value);}
    | Exp RELOP Exp                                                {$$ = new Exp($1, $3, "bool", $2->value);}
    | LPAREN Type RPAREN Exp                                       {$$ = new Exp($4, $2);};

CheckBool : Exp { checkBoolExp(dynamic_cast<Exp*>($1)->type); };
Label     :                                {$$ = new Label(); };

AddScopeMarker : /* epsilon */ {symtable.addScope(false, symtable.getCurrScopeRetType());};
AddLoopScopeMarker : /* epsilon */ {symtable.addScope(true, symtable.getCurrScopeRetType());};
RemoveScopeMarker : /* epsilon */ {symtable.removeScope();};
%%

SymTable symtable = SymTable(); 
Allocator allocator = Allocator();
CodeBuffer buffer = CodeBuffer();
int main()
{
	return yyparse();
}

void yyerror(const char * message)
{
	output::errorSyn(yylineno);
        exit(0);
}

void checkBoolExp(string type)
{
        if (type != "bool") {
                output::errorMismatch(yylineno);
                exit(0);
        }
}