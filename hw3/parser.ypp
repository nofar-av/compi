%{
	#include "output.hpp"
	#include <iostream>
	#include <stdlib.h>
        #include "decl.hpp"
	typedef enum { OP_AND, OP_OR } opType;

	using namespace std;
        int yylex();
        extern int yylineno;
	void yyerror(const char * message);
        %union
        {
                byte b;
                int num;
                bool f;
                string s;
        }

%}

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token OVERRIDE
%token TRUE
%token FALSE
%token RETURN
%token IF
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token ID
%token NUM
%token STRING
%right ASSIGN
%left OR
%left AND
%left RELOP
%left BINOP_ADD
%left BINOP_MUL
%nonassoc NOT
%left LPAREN LBRACE RPAREN RBRACE
%nonassoc ELSE

%%
Program : Funcs { };

Funcs : /* epsilon */ { }
        | FuncDecl Funcs { };

FuncDecl : OverRide RetType ID LPAREN Formals RPAREN LBRACE AddScopeMarker Statements RBRACE { symtable.removeScope(); };

OverRide : /* epsilon */ { output::printProductionRule(5); }
        |  OVERRIDE { output::printProductionRule(6); };

RetType : Type { output::printProductionRule(7); }
        | VOID { output::printProductionRule(8); };

Formals : /* epsilon */ { output::printProductionRule(9); }
        | FormalsList { output::printProductionRule(10); };

FormalsList : FormalDecl { output::printProductionRule(11); }
            | FormalDecl COMMA FormalsList { output::printProductionRule(12); };

FormalDecl : Type  { output::printProductionRule(13); };

Statements : Statement { output::printProductionRule(14); }
            | Statements Statement { output::printProductionRule(15); };

Statement : LBRACE AddScopeMarker Statements RBRACE { symtable.removeScope(); }
        | Type ID SC {  symtable.addSymbol($2.name, $1.type); 
                        output::printProductionRule(17); }
        | Type ID ASSIGN Exp SC { symtable.addSymbol($2.name, $1.type);
                                  output::printProductionRule(18); }
        | ID ASSIGN Exp SC { symtable.addSymbol($2.name, $3.type);
                             output::printProductionRule(19); }
        | Call SC { output::printProductionRule(20); }
        | RETURN SC { output::printProductionRule(21); }
        | RETURN Exp SC { output::printProductionRule(22); }
        | IF LPAREN Exp RPAREN AddScopeMarker Statement { symtable.removeScope(); }
        | IF LPAREN Exp RPAREN AddScopeMarker Statement removeScope ELSE AddScopeMarker Statement { symtable.removeScope(); }
        | WHILE LPAREN Exp RPAREN AddLoopScopeMarker Statement { symtable.removeScope(); }
        | BREAK SC { symtable.verifyInLoop(true); }
        | CONTINUE SC { symtable.verifyInLoop(false); }
        ;

Call : ID LPAREN ExpList RPAREN { output::printProductionRule(28); }
    | ID LPAREN RPAREN { output::printProductionRule(29); };

ExpList : Exp { output::printProductionRule(30); }
        | Exp COMMA ExpList { output::printProductionRule(31); };

Type : INT { $$ = new Type("int"); }
    | BYTE { $$ = new Type("byte"); }
    | BOOL { $$ = new Type("bool"); };

Exp : LPAREN Exp RPAREN { output::printProductionRule(35); }
    | Exp BINOP_MUL Exp { output::printProductionRule(36); }
    | Exp BINOP_ADD Exp { output::printProductionRule(36); }
    | ID { output::printProductionRule(37); }
    | Call { output::printProductionRule(38); }
    | NUM { output::printProductionRule(39); }
    | NUM B { output::printProductionRule(40); }
    | STRING { output::printProductionRule(41); }
    | TRUE { output::printProductionRule(42); }
    | FALSE { output::printProductionRule(43); }
    | NOT Exp { output::printProductionRule(44); }
    | Exp AND Exp { output::printProductionRule(45); }
    | Exp OR Exp { output::printProductionRule(46); }
    | Exp RELOP Exp { output::printProductionRule(47); }
    | LPAREN Type RPAREN Exp { output::printProductionRule(48); };

AddScopeMarker : /* epsilon */ {symtable.addScope(false);};
AddLoopScopeMarker : /* epsilon */ {symtable.addScope(true);};
RemoveScopeMarker : /* epsilon */ {symtable.removeScope();};
%%

SymTable symtable = new SymTable(); 
int main()
{
	return yyparse();
}

void yyerror(const char * message)
{
	output::errorSyn(yylineno);
        exit(0);
}